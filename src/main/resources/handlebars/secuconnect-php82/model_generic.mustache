class {{classname}} {{#parentSchema}}extends {{{parent}}}{{#interfaceModels}}{{#@first}} implements {{/@first}}{{classname}}{{^@last}}, {{/@last}}{{#@last}} {{/@last}}{{/interfaceModels}}{{/parentSchema}}{{^parentSchema}}implements ArrayAccess, ModelInterface{{#interfaceModels}}, {{classname}}{{/interfaceModels}}{{/parentSchema}}{{#parentSchema}}{{/parentSchema}}
{
    const DISCRIMINATOR = {{#discriminator}}'{{discriminator.propertyName}}'{{/discriminator}}{{^discriminator}}null{{/discriminator}};

    /**
      * The original name of the model.
      * @var string
      */
    protected static string $swaggerModelName = '{{name}}';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static array $swaggerTypes = [{{#vars}}
        '{{name}}' => '{{{datatype}}}'{{#hasMore}},{{/hasMore}}{{/vars}}
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static array $swaggerFormats = [{{#vars}}
        '{{name}}' => {{#dataFormat}}'{{{dataFormat}}}'{{/dataFormat}}{{^dataFormat}}null{{/dataFormat}}{{#hasMore}},{{/hasMore}}{{/vars}}
    ];

    public static function swaggerTypes(): array
    {
        return self::$swaggerTypes{{#parentSchema}} + parent::swaggerTypes(){{/parentSchema}};
    }

    public static function swaggerFormats(): array
    {
        return self::$swaggerFormats{{#parentSchema}} + parent::swaggerFormats(){{/parentSchema}};
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static array $attributeMap = [{{#vars}}
        '{{name}}' => '{{baseName}}'{{#hasMore}},{{/hasMore}}{{/vars}}
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static array $setters = [{{#vars}}
        '{{name}}' => '{{setter}}'{{#hasMore}},{{/hasMore}}{{/vars}}
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static array $getters = [{{#vars}}
        '{{name}}' => '{{getter}}'{{#hasMore}},{{/hasMore}}{{/vars}}
    ];

    public static function attributeMap(): array
    {
        return {{#parentSchema}}parent::attributeMap() + {{/parentSchema}}self::$attributeMap;
    }

    public static function setters(): array
    {
        return {{#parentSchema}}parent::setters() + {{/parentSchema}}self::$setters;
    }

    public static function getters(): array
    {
        return {{#parentSchema}}parent::getters() + {{/parentSchema}}self::$getters;
    }
    {{^parentSchema}}

    /**
     * Associative array for storing property values
     * @var array
     */
    protected array $container = [];
    {{/parentSchema}}

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        {{#parentSchema}}
        parent::__construct($data);

        {{/parentSchema}}
        {{#vars}}
        $this->container['{{name}}'] = $data['{{name}}'] ?? {{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}};
        {{/vars}}
        {{#discriminator}}

        // Initialize discriminator property with the model name.
        $discriminator = array_search('{{discriminator.propertyName}}', self::$attributeMap);
        $this->container[$discriminator] = static::$swaggerModelName;
        {{/discriminator}}
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        {{#parentSchema}}
        $invalid_properties = parent::listInvalidProperties();
        {{/parentSchema}}
        {{^parentSchema}}
        $invalid_properties = [];
        {{/parentSchema}}

        {{#vars}}
        {{#required}}
        if ($this->container['{{name}}'] === null) {
            $invalid_properties[] = "'{{name}}' can't be null";
        }
        {{/required}}
        {{#hasValidation}}
        {{#maxLength}}
        if ({{^required}}!is_null($this->container['{{name}}']) && {{/required}}(mb_strlen($this->container['{{name}}']) > {{maxLength}})) {
            $invalid_properties[] = "invalid value for '{{name}}', the character length must be smaller than or equal to {{{maxLength}}}.";
        }

        {{/maxLength}}
        {{#minLength}}
        if ({{^required}}!is_null($this->container['{{name}}']) && {{/required}}(mb_strlen($this->container['{{name}}']) < {{minLength}})) {
            $invalid_properties[] = "invalid value for '{{name}}', the character length must be bigger than or equal to {{{minLength}}}.";
        }

        {{/minLength}}
        {{#maximum}}
        if ({{^required}}!is_null($this->container['{{name}}']) && {{/required}}($this->container['{{name}}'] >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}})) {
            $invalid_properties[] = "invalid value for '{{name}}', must be smaller than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}{{maximum}}.";
        }

        {{/maximum}}
        {{#minimum}}
        if ({{^required}}!is_null($this->container['{{name}}']) && {{/required}}($this->container['{{name}}'] <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}})) {
            $invalid_properties[] = "invalid value for '{{name}}', must be bigger than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{minimum}}.";
        }

        {{/minimum}}
        {{#pattern}}
        if ({{^required}}!is_null($this->container['{{name}}']) && {{/required}}!preg_match("{{{pattern}}}", $this->container['{{name}}'])) {
            $invalid_properties[] = "invalid value for '{{name}}', must be conform to the pattern {{{pattern}}}.";
        }

        {{/pattern}}
        {{#maxItems}}
        if ({{^required}}!is_null($this->container['{{name}}']) && {{/required}}(count($this->container['{{name}}']) > {{maxItems}})) {
            $invalid_properties[] = "invalid value for '{{name}}', number of items must be less than or equal to {{{maxItems}}}.";
        }

        {{/maxItems}}
        {{#minItems}}
        if ({{^required}}!is_null($this->container['{{name}}']) && {{/required}}(count($this->container['{{name}}']) < {{minItems}})) {
            $invalid_properties[] = "invalid value for '{{name}}', number of items must be greater than or equal to {{{minItems}}}.";
        }

        {{/minItems}}
        {{/hasValidation}}
        {{/vars}}
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return true;
    }

    {{#vars}}

    /**
     * Gets {{name}}
     * @return {{datatype}}
     */
    public function {{getter}}(): {{baseType}}|null
    {
        return $this->container['{{name}}'] ?? null;
    }

    /**
     * Sets {{name}}
     * @param {{datatype}}|null ${{name}}{{#description}} {{{description}}}{{/description}}{{^description}} {{{name}}}{{/description}}
     * @return $this
     */
    public function {{setter}}(?{{baseType}} ${{name}}): static
    {
        {{#hasValidation}}
        {{#maxLength}}
        if ({{^required}}!is_null(${{name}}) && {{/required}}(mb_strlen(${{name}}) > {{maxLength}})) {
            throw new InvalidArgumentException('invalid length for ${{name}} when calling {{classname}}.{{operationId}}, must be smaller than or equal to {{maxLength}}.');
        }{{/maxLength}}
        {{#minLength}}
        if ({{^required}}!is_null(${{name}}) && {{/required}}(mb_strlen(${{name}}) < {{minLength}})) {
            throw new InvalidArgumentException('invalid length for ${{name}} when calling {{classname}}.{{operationId}}, must be bigger than or equal to {{minLength}}.');
        }
        {{/minLength}}
        {{#maximum}}
        if ({{^required}}!is_null(${{name}}) && {{/required}}(${{name}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}})) {
            throw new InvalidArgumentException('invalid value for ${{name}} when calling {{classname}}.{{operationId}}, must be smaller than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}{{maximum}}.');
        }
        {{/maximum}}
        {{#minimum}}
        if ({{^required}}!is_null(${{name}}) && {{/required}}(${{name}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}})) {
            throw new InvalidArgumentException('invalid value for ${{name}} when calling {{classname}}.{{operationId}}, must be bigger than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{minimum}}.');
        }
        {{/minimum}}
        {{#pattern}}
        if ({{^required}}!is_null(${{name}}) && {{/required}}(!preg_match("{{{pattern}}}", ${{name}}))) {
            throw new InvalidArgumentException("invalid value for ${{name}} when calling {{classname}}.{{operationId}}, must conform to the pattern {{{pattern}}}.");
        }
        {{/pattern}}
        {{#maxItems}}
        if ({{^required}}!is_null(${{name}}) && {{/required}}(count(${{name}}) > {{maxItems}})) {
            throw new InvalidArgumentException('invalid value for ${{name}} when calling {{classname}}.{{operationId}}, number of items must be less than or equal to {{maxItems}}.');
        }{{/maxItems}}
        {{#minItems}}
        if ({{^required}}!is_null(${{name}}) && {{/required}}(count(${{name}}) < {{minItems}})) {
            throw new InvalidArgumentException('invalid length for ${{name}} when calling {{classname}}.{{operationId}}, number of items must be greater than or equal to {{minItems}}.');
        }
        {{/minItems}}
        {{/hasValidation}}
        $this->container['{{name}}'] = ${{name}};

        return $this;
    }
    {{/vars}}

    /**
     * Returns true if offset exists. False otherwise.
     * @param integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * @inheritDoc
     */
    public function getModelName(): string
    {
        return self::$swaggerModelName;
    }
}

