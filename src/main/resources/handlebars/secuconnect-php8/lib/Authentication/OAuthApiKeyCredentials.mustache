<?php

namespace {{invokerPackage}}\Authentication;

use {{invokerPackage}}\ApiException;

/**
 * Class OAuthApiKeyCredentials
 */
class OAuthApiKeyCredentials extends AuthenticationCredentials
{
    const GRANT_TYPE = 'api_key';

    /**
     * Function to get credentials data.
     *
     * @param string $clientId
     * @param string $clientSecret
     * @param string $apiKey
     * @param string $uuid
     * @return OAuthApiKeyCredentials
     * @throws ApiException
     */
    public static function from($clientId, $clientSecret, $apiKey, $uuid = null)
    {
        if (empty($clientId) || empty($clientSecret) || empty($apiKey)) {
            throw new ApiException('Incomplete credentials data', 401);
        }

        $credentials = new static();
        $credentials->credentials = [
            'grant_type' => self::GRANT_TYPE,
            'client_id' => $clientId,
            'client_secret' => $clientSecret,
            'apikey' => $apiKey,
        ];

        if (!empty($uuid)) {
            $credentials->credentials['uuid'] = $uuid;
        }

        return $credentials;
    }

    /**
     * @inheritdoc
     */
    public function getUniqueKey()
    {
        $textualKey = $this->credentials['grant_type']
            . $this->credentials['apikey'];

        if (!empty($this->credentials['uuid'])) {
            $textualKey .= $this->credentials['uuid'];
        }
        return \md5($textualKey);
    }
}
